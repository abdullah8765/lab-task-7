Name: Abdullah Ahmed
SAP-ID: 53639
Assignment: DS (Lab)-task-7

Q1. Given a sorted array of n integers and a target value, find the index of the target value in the array. Show the all active items [divided half] at every stage. Handle the situation when the target value is not found.

#include <iostream>
int binarySearch(int arr[], int target, int n) {
    int left = 0, right = n - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;  // to avoid overflow
        cout << "Active items: ";
        for (int i = left; i <= mid; i++) {
            cout << arr[i] << " ";
        }
        cout << "and ";
        for (int i = mid + 1; i <= right; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
        if (arr[mid] == target) {
            return mid;
        } else if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return -1;  // target value not found
}

int main() {
    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    int target = 5;
    int n = sizeof(arr) / sizeof(arr[0]);
    int result = binarySearch(arr, target, n);
    cout << "Index of " << target << ": " << result << endl;
    return 0;
}

2.	Given a sorted array of n integers and a target value, find the first occurrence of the target value in the array

#include <iostream>
Using namespace std;
int firstOccurrence(int arr[], int target, int n) {
    int left = 0, right = n - 1, result = -1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == target) {
            result = mid;
            right = mid - 1;  // search in the left half to find the first occurrence
        } else if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return result;
}

int main() {
    int arr[] = {1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9};
    int target = 5;
    int n = sizeof(arr) / sizeof(arr[0]);
    int result = firstOccurrence(arr, target, n);
    if (result != -1) {
        cout << "First occurrence of " << target << " is at index " << result << endl;
    } else {
        cout << "Target value not found in the array." << endl;
    }
    return 0;
}

3.	Given a sorted array of n integers and a target value, find the last occurrence of the target value in the array.

#include <iostream>
using namespace std;
int lastOccurrence(int arr[], int target, int n) {
	int left = 0, right = n - 1, result = -1;
	while (left <= right) {
		int mid = left + (right - left) / 2;
		if (arr[mid] == target) {
			result = mid;
			left = mid + 1;  // search in the right half to find the last occurrence
		}
		else if (arr[mid] < target) {
			left = mid + 1;
		}
		else {
			right = mid - 1;
		}
	}
	return result;
}

int main() {
	int arr[] = { 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9 };
	int target = 5;
	int n = sizeof(arr) / sizeof(arr[0]);
	int result = lastOccurrence(arr, target, n);
	if (result != -1) {
		cout << "Last occurrence of " << target << " is at index " << result << endl;
	}
	else {
		cout << "Target value not found in the array." << endl;
	}
	return 0;
}


4.	Given a sorted array of n integers and a target value, find the number of occurrences of the target value in the array.
#include <iostream>
using namespace std;
int firstOccurrence(int arr[], int target, int n) {
    int left = 0, right = n - 1, result = -1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == target) {
            result = mid;
            right = mid - 1;  // search in the left half to find the first occurrence
        } else if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return result;
}

int lastOccurrence(int arr[], int target, int n) {
    int left = 0, right = n - 1, result = -1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == target) {
            result = mid;
            left = mid + 1;  // search in the right half to find the last occurrence
        } else if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return result;
}

int countOccurrences(int arr[], int target, int n) {
    int first_occurrence = firstOccurrence(arr, target, n);
    int last_occurrence = lastOccurrence(arr, target, n);
    if (first_occurrence != -1 && last_occurrence != -1) {
        return last_occurrence - first_occurrence + 1;
    } else {
        return 0;
    }
}

int main() {
    int arr[] = {1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9};
    int target = 5;
    int n = sizeof(arr) / sizeof(arr[0]);
    int result = countOccurrences(arr, target, n);
    if (result != 0) {
        scout << "Number of occurrences of " << target << " is " << result << endl;
    } else {
        cout << "Target value not found in the array." << endl;
    }
    return 0;
}
